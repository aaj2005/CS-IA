import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.apache.commons.io.FilenameUtils;




/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author alial
 */
public class MainGUI extends JFrame {
    
    
    /**
     * Creates new form NewJFrame
     */
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moveFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        clearBasketButton = new javax.swing.JButton();
        videoSlider = new javax.swing.JSlider();
        BaskScroll = new javax.swing.JScrollPane();
        Basket = new javax.swing.JTree();
        ImageHolderPanel = new java.awt.Panel();
        MainImage = new javax.swing.JLabel();
        VisibleFilesTitle = new java.awt.Label();
        fileName = new javax.swing.JTextField();
        videoLengthTime = new javax.swing.JLabel();
        MoveBasketButton = new javax.swing.JButton();
        ApplyButton = new javax.swing.JButton();
        currentTime = new javax.swing.JLabel();
        BasketLabel = new java.awt.Label();
        MainFileListScroll = new javax.swing.JScrollPane();
        MainFileList = new javax.swing.JTree();
        MainDirectorySearch = new javax.swing.JFileChooser();
        MoveButton = new javax.swing.JButton();
        pausePlayButton = new javax.swing.JButton();
        addToBasketButton = new javax.swing.JButton();

        moveFileChooser.setCurrentDirectory(new java.io.File("D:\\Download"));
        moveFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(644, 399));

        jPanel1.setPreferredSize(new java.awt.Dimension(1489, 797));

        clearBasketButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        clearBasketButton.setText("Clear");
        clearBasketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBasketButtonActionPerformed(evt);
            }
        });

        videoSlider.setMaximum(0);
        videoSlider.setPaintLabels(true);
        videoSlider.setToolTipText("");
        videoSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                videoSliderStateChanged(evt);
            }
        });
        videoSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                videoSliderMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                videoSliderMouseReleased(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Basket");
        Basket.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        Basket.setToolTipText("");
        Basket.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                BasketValueChanged(evt);
            }
        });
        BaskScroll.setViewportView(Basket);

        ImageHolderPanel.setBackground(new java.awt.Color(0, 0, 0));
        ImageHolderPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        ImageHolderPanel.setPreferredSize(new java.awt.Dimension(590, 520));

        MainImage.setBackground(new java.awt.Color(0, 0, 0));
        MainImage.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        MainImage.setPreferredSize(new java.awt.Dimension(1040, 768));

        javax.swing.GroupLayout ImageHolderPanelLayout = new javax.swing.GroupLayout(ImageHolderPanel);
        ImageHolderPanel.setLayout(ImageHolderPanelLayout);
        ImageHolderPanelLayout.setHorizontalGroup(
            ImageHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
            .addGroup(ImageHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(MainImage, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ImageHolderPanelLayout.setVerticalGroup(
            ImageHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
            .addGroup(ImageHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(MainImage, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        VisibleFilesTitle.setAlignment(java.awt.Label.CENTER);
        VisibleFilesTitle.setFont(new java.awt.Font("Dialog", 0, 32)); // NOI18N
        VisibleFilesTitle.setText("Visible Files");

        fileName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        videoLengthTime.setText("00:00:00");
        videoLengthTime.setAlignmentY(0.0F);

        MoveBasketButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        MoveBasketButton.setText("Move Basket");
        MoveBasketButton.setActionCommand("");
        MoveBasketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveBasketButtonActionPerformed(evt);
            }
        });

        ApplyButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ApplyButton.setText("Apply");
        ApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyButtonActionPerformed(evt);
            }
        });

        currentTime.setText("00:00:00");
        currentTime.setAlignmentY(0.0F);

        BasketLabel.setFont(new java.awt.Font("Dialog", 0, 32)); // NOI18N
        BasketLabel.setPreferredSize(new java.awt.Dimension(169, 46));
        BasketLabel.setText("Basket");

        MainFileListScroll.setMinimumSize(new java.awt.Dimension(0, 0));
        MainFileListScroll.setPreferredSize(new java.awt.Dimension(1526, 998));

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Files");
        MainFileList.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        MainFileList.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                MainFileListValueChanged(evt);
            }
        });
        MainFileListScroll.setViewportView(MainFileList);

        MainDirectorySearch.setApproveButtonText("Select Folder");
        MainDirectorySearch.setCurrentDirectory(new java.io.File("D:\\Download"));
        MainDirectorySearch.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        MainDirectorySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainDirectorySearchActionPerformed(evt);
            }
        });

        MoveButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        MoveButton.setText("Move");
        MoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveButtonActionPerformed(evt);
            }
        });

        pausePlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/download-icon-play+icon-1320183326084518754_16.png"))); // NOI18N
        pausePlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausePlayButtonActionPerformed(evt);
            }
        });

        addToBasketButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        addToBasketButton.setText("+");
        addToBasketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToBasketButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(MainFileListScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BaskScroll)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MainDirectorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(BasketLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(addToBasketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(MoveBasketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(clearBasketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(VisibleFilesTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(pausePlayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(currentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(videoSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(videoLengthTime, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(ImageHolderPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ApplyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 228, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(ImageHolderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(MainDirectorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(videoSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(BasketLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(addToBasketButton)
                                        .addComponent(MoveBasketButton))
                                    .addComponent(clearBasketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BaskScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(pausePlayButton)
                                        .addComponent(currentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(videoLengthTime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ApplyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(MoveButton))
                                .addGap(140, 140, 140))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(VisibleFilesTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(MainFileListScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    ImageHandling imageHandler = new ImageHandling();
    
    public static final ArrayList<String> videoTypeList = new ArrayList<>(Arrays.asList("webm","mkv","flv","vob","ogv","ogg"
	    ,"drc","gif","mng","avi","mov","qt","wmv","amv","mp4","m4p","m4v","mpg","mpeg","m4v"));
    public static final ArrayList<String> imageTypeList = new ArrayList<>(Arrays.asList("jpg","jpeg","jpe","jif","jfif","jfi"
	    ,"png","gif","webp","tiff","tif","arw","jp2","j2k","jpf","jpx","jpm"));
    
    
    public static File currentDirectory;
    
    
    public MainGUI() {
	//initialize the tree selection models and gui dimensions and layout
	setSize(new Dimension(1920,1080));
	initComponents();
	setLayout(new BorderLayout());
	MainFileList.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
	Basket.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
	MainGUI.Basket.setRootVisible(false);
	MainGUI.MainFileList.setRootVisible(false);
	ImageHandling.play();
	Basket.setEditable(false);
	videoSlider.setEnabled(false);
	setExtendedState(JFrame.MAXIMIZED_BOTH);
    }
    
/////////////////////////DIRECTORY SEARCH/////////////////////////////////////////

//Executed when users click "select folder in the file chooser"    
    private void MainDirectorySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainDirectorySearchActionPerformed
	
	//creating an instance of the tree manager class
	TreeInsertionManager listManagerClass = new TreeInsertionManager();
	//resetting the image and file name in the textbox
	MainImage.setIcon(null);
	fileName.setText(null);
	try {
	    //check if user clicked "select folder"
	    if ("ApproveSelection".equals(evt.getActionCommand())) {
		JFileChooser chooser = (JFileChooser)evt.getSource(); //get directory from event
		currentDirectory = listManagerClass.addFolderContentToTree(MainFileList,
			chooser.getName(),chooser.getSelectedFile()); //populate the tree
		chooser.setCurrentDirectory(chooser.getSelectedFile()); //update current directory
	    }else{
		currentDirectory = ((JFileChooser)evt.getSource()).getCurrentDirectory();
	    }
	} catch (IOException ex) {
	    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
	}
	MainFileList.clearSelection();
	MainFileList.repaint();
    }//GEN-LAST:event_MainDirectorySearchActionPerformed

    
/////////////////////////MAIN TREE AND BASKET MODIFICATIONS/////////////////////////////////////////    
    
    
//when user interacts with visible file list tree
    private void MainFileListValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_MainFileListValueChanged
	//ensure that the two trees are accessed separately
	if(evt.isAddedPath()){
	    Basket.clearSelection();
	    addToBasketButton.setText("+");
	    fileName.setEnabled(true);
	    fileName.setText(getFileNameWithoutExtension(evt.getPath()));//update the filename textbox
	    imageHandler.handler(treePathCombiner(evt.getPath(),0), MainImage);
	}
	
	
    }//GEN-LAST:event_MainFileListValueChanged
  
//when user interacts with basket tree
    private void BasketValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_BasketValueChanged
	//ensure that the two trees are accessed separately
	if(evt.isAddedPath()){
	    MainFileList.clearSelection();
	    addToBasketButton.setText("-");
	    fileName.setText("");
	    fileName.setEnabled(false);//ensure that the file cannot be renamed while basket is selected
	    imageHandler.handler(treePathCombiner(evt.getPath(),0), MainImage);
	}
	
    }//GEN-LAST:event_BasketValueChanged
	

    
/////////////////////////BASKET MODIFICATION BUTTONS/////////////////////////////////////////
    
    //when user clicks apply button to rename a file	
    private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyButtonActionPerformed
	
	if(!"null".equals(MainFileList.getSelectionPath().toString())){//check that user selected a file
	    //get the selected file as an instance of the file class
	    File originalFile = new File(treePathCombiner(MainFileList.getSelectionPath(),0));
	    
	    TreePath oldPath = MainFileList.getSelectionPath();
	    String newFileName = treePathCombiner(MainFileList.getSelectionPath(),1)
		    +"\\";
	    File renamedFile = new File(newFileName+fileName.getText()+"."+FilenameUtils
		    .getExtension(originalFile.toString())); //new file name
	    boolean flag = originalFile.renameTo(renamedFile);
	    if (flag == true) {//check that if file is renamed successfully
		//update filename and properties on the jtree
		DefaultTreeModel model = (DefaultTreeModel)MainFileList.getModel(); 
		DefaultMutableTreeNode childNode = (DefaultMutableTreeNode)MainFileList.getSelectionPath().getPath()
			[MainFileList.getSelectionPath().getPath().length-1];
		FileClass child = (FileClass)childNode.getUserObject();
		child.setFileNameDirectory(renamedFile.getName(), renamedFile.getAbsolutePath());
		model.nodeChanged(childNode);
		MainFileList.setModel(model);
		MainFileList.setSelectionPath(oldPath);
	    }else{//if renaming is not successful
		int approve = JOptionPane.showConfirmDialog(MainGUI.getWindows()[0],"Error! Name already exists. "
			+ "Would you like to rename it?");
		//give users the option to choose another name
		if(JOptionPane.YES_OPTION==approve){
		    boolean successRename = false;
		    while(!successRename){
			renamedFile = new File(newFileName + JOptionPane.showInputDialog("File Name:")
				+ "."+FilenameUtils
				.getExtension(originalFile.toString()));
			successRename = originalFile.renameTo(renamedFile);
			if(renamedFile==null){
			    return;
			}
			if(successRename){
			    //update the file list
			    DefaultTreeModel model = (DefaultTreeModel)MainFileList.getModel();
			    DefaultMutableTreeNode childNode = (DefaultMutableTreeNode)MainFileList
				    .getSelectionPath().getPath()
				[MainFileList.getSelectionPath().getPath().length-1];
			    FileClass child = (FileClass)childNode.getUserObject();
			    child.setFileNameDirectory(renamedFile.getName(), renamedFile.getAbsolutePath());
			    model.nodeChanged(childNode);
			    MainFileList.setModel(model);
			    MainFileList.setSelectionPath(oldPath);
			}
		    }
		}
	    } 
	}
    }//GEN-LAST:event_ApplyButtonActionPerformed

//trigger event when move button is pressed
    private void MoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveButtonActionPerformed
	MainImage.removeAll();
	if (moveFileChooser.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION){//check if user selected destination folder
	    if(MainFileList.getLastSelectedPathComponent()!=null){//check that file is selected in the tree
		//check that filename does not exist in destination folder
		if(!(new File(moveFileChooser.getSelectedFile().getAbsolutePath()+"\\"+MainFileList.getLastSelectedPathComponent()).isFile()) && (new File(getLastPathComponentObject().getAbsPath())).isFile()){
		    try {
			//move file
			getLastPathComponentObject().moveFile(moveFileChooser.getSelectedFile().getAbsolutePath());
		    } catch (IOException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		    }
		}else if(!(new File(moveFileChooser.getSelectedFile().getAbsolutePath()+"\\"+MainFileList.getLastSelectedPathComponent()).isDirectory())){
		    try {
			//move folder
			getLastPathComponentObject().moveFolder(moveFileChooser.getSelectedFile().getAbsolutePath());
		    } catch (IOException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		    }
		}
	    }
	}
    }//GEN-LAST:event_MoveButtonActionPerformed

//when user clicks add to basket (+/-) button
    private void addToBasketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToBasketButtonActionPerformed
        //check whether basket or main file list is selected
	if(!MainFileList.isSelectionEmpty()){
	    try {
		BasketListManager.addToBasket();//call method from basket list manager
	    } catch (IOException ex) {
		Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
	    }
	    
	    
	}else if(!Basket.isSelectionEmpty()){
	    BasketListManager.removeFromBasket(); //call method from basket list manager
	}
	((DefaultTreeModel)Basket.getModel()).reload();
	
	
	
	
	
    }//GEN-LAST:event_addToBasketButtonActionPerformed
    
    
    
    
//when move basket button is pressed    
    private void MoveBasketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveBasketButtonActionPerformed
        //check that user selects a destination folder
	if (MainGUI.moveFileChooser.showDialog(MainGUI.getWindows()[0], "Select") == JFileChooser.APPROVE_OPTION){
	    try {
		BasketListManager.basketElement = 0;
		//call basket list manager to move files
		BasketListManager.moveFiles(moveFileChooser.getSelectedFile(), ((DefaultMutableTreeNode)MainGUI.Basket.getModel().getRoot()));
		//clear the basket
		DefaultTreeModel model =(((DefaultTreeModel)Basket.getModel()));
		((DefaultMutableTreeNode)model.getRoot()).removeAllChildren();
		model.reload();
		Basket.setModel(model);
	    } catch (IOException ex) {
		Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
	    }
	    
	}
	
    }//GEN-LAST:event_MoveBasketButtonActionPerformed
    
    
    
    
    
    
    
    
    
/////////////////////////MEDIA CONTROLLER STUFF/////////////////////////////////////////

    
//when pause/play button is pressed
	private void pausePlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausePlayButtonActionPerformed
        ImageHandling.mediaPlayerComponent.mediaPlayer().controls().pause(); //call imagehandling class to pause video
	
	
    }//GEN-LAST:event_pausePlayButtonActionPerformed

//when user lets go of the video slider
    private void videoSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_videoSliderMouseReleased
        ImageHandling.changeTime(videoSlider.getValue()); //change the time to match user selection
	ImageHandling.pausePlay();//resume video
    }//GEN-LAST:event_videoSliderMouseReleased

//when user moves video slider
    private void videoSliderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_videoSliderMousePressed
        ImageHandling.pausePlay();//pause video temporarily
    }//GEN-LAST:event_videoSliderMousePressed

    
//when video slider changes state    
    private void videoSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_videoSliderStateChanged
       if(!ImageHandling.isPlaying()){
	   long newLength = videoSlider.getValue();//update the video time
	   //format to HH:MM:SS
	   String formattedLength = String.format("%02d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(newLength),
		    TimeUnit.MILLISECONDS.toMinutes(newLength) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(newLength)),
		    TimeUnit.MILLISECONDS.toSeconds(newLength) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(newLength)));
		    
	    currentTime.setText(formattedLength);
	    
       }
    }//GEN-LAST:event_videoSliderStateChanged

//when clear basket button is clicked
    private void clearBasketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBasketButtonActionPerformed
        
	//check if user agrees to confirmation message
	if(JOptionPane.showConfirmDialog(this, "Are you sure you want to clear all elements in the basket?")==JOptionPane.YES_OPTION){
	    DefaultTreeModel model =(((DefaultTreeModel)Basket.getModel()));
	    ((DefaultMutableTreeNode)model.getRoot()).removeAllChildren();//remove all elements
	    model.reload();
	    Basket.setModel(model);
	}
	
	
    }//GEN-LAST:event_clearBasketButtonActionPerformed
	
	
	
	
/////////////////////////CUSTOM FUNCTIONS/////////////////////////////////////////	

    //get file properties of currently selected file
    public FileClass getLastPathComponentObject(){
	return ((FileClass)((DefaultMutableTreeNode)MainFileList.getLastSelectedPathComponent()).getUserObject());
    }
    
    //convert treepath into string and remove extra slashes if wanted
    private String treePathCombiner(TreePath treePath, int endIndexRemover){
	StringBuilder finalPath = new StringBuilder();
	finalPath.append(currentDirectory);
	//System.out.println(treePath);
	for(int pathIndex = 1; pathIndex<treePath.getPathCount()-endIndexRemover; pathIndex++){
	    if(treePath.getPathComponent(pathIndex).toString().contains(":\\")){
		finalPath.deleteCharAt(finalPath.length()-1);
	    }else{
		finalPath.append("\\");
		finalPath.append(treePath.getPathComponent(pathIndex).toString());
	    }
	}	
	return finalPath.toString();
    }
    
    //get file name without file type extension
    private String getFileNameWithoutExtension(TreePath treePath){
	String filename=treePath.getPathComponent(treePath.getPathCount()-1).toString();
	filename = filename.replaceAll("."+FilenameUtils.getExtension(filename), "");
	return filename;
    }
    
    
    
    
    
    
    
    
    
    
    
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
	    //set the look and feel of the class
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
	    
	//exception handling
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the GUI */
	
	//initiate the constructor of the main gui and display
        java.awt.EventQueue.invokeLater(new Runnable(){
	    public void run(){
		MainGUI mainGUI = new MainGUI();
		mainGUI.pack();
		
		mainGUI.setVisible(true);
	    }
	});
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyButton;
    public static javax.swing.JScrollPane BaskScroll;
    public static javax.swing.JTree Basket;
    private java.awt.Label BasketLabel;
    public static java.awt.Panel ImageHolderPanel;
    public static javax.swing.JFileChooser MainDirectorySearch;
    public static javax.swing.JTree MainFileList;
    private static javax.swing.JScrollPane MainFileListScroll;
    public static javax.swing.JLabel MainImage;
    public static javax.swing.JButton MoveBasketButton;
    private javax.swing.JButton MoveButton;
    private java.awt.Label VisibleFilesTitle;
    public static javax.swing.JButton addToBasketButton;
    private javax.swing.JButton clearBasketButton;
    public static javax.swing.JLabel currentTime;
    private javax.swing.JTextField fileName;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JFileChooser moveFileChooser;
    public static javax.swing.JButton pausePlayButton;
    public static javax.swing.JLabel videoLengthTime;
    public static javax.swing.JSlider videoSlider;
    // End of variables declaration//GEN-END:variables
    
}
